
# Swagger Docs

openapi: 3.0.0
info:
  title: Kollectbin
  version: 1.3.0
  description: Swagger API Documentation for Kollectbin

servers: 
  - url: http://localhost:5000

tags:
  - name: Comics 
    description: Endpoints for managing comic collection and data.
  - name: Shops
    description: Endpoints for managing local comic, trading card, collectibles, and video game shops.
  - name: Users 
    description: Endpoints for user registration and authentication.

paths:
  # Comic related routes
  /comics:
    # Get all comics
    get:
      tags: 
        - Comics
      summary: Get all comics
      responses:
        '200':
          description: A list of all saved comics
    
    # Add a comic
    post:
      tags: 
        - Comics
      summary: Create a new comic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - author
                - issue
                - volume
              properties:
                title:
                  type: string
                author: 
                  type: string
                issue:
                  type: number
                  minimum: 1
                volume:
                  type: number
                  minimum: 1
                publisher:
                  type: string
                coverVariant:
                  type: string
                releaseDate:
                  type: string
                  format: date
                rating:
                  type: number
                  minimum: 1
                  maximum: 10
                purchasePrice:
                  type: number
                currentValue:
                  type: number
                condition:
                  type: string
                  enum: 
                    - Near Mint
                    - Very Fine
                    - Fine
                    - Very Good
                    - Good
                    - Fair
                    - Poor
                  default: Good
                isRead:
                  type: boolean
                  default: false
                genre:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                notes:
                  type: string
      responses:
        '201':
          description: Comic created

  # GET, PUT, DELETE by id
  /comics/{id}:
    # GET to retreive by id
    get:
      tags: 
        - Comics
      summary: Retreive a Comic by ID
      description: Returns a single comic object based on the provided ID.
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: string
          description: The ID of the Comic to retreive
      responses:
        '200':
          description: Comic by ID
        '404':
          description: Comic not found
    
    # PUT to update by id
    put:
      tags: 
        - Comics
      summary: Update a comic by ID
      description: Updates a comic in the collection by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Comic to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                author: 
                  type: string
                issue:
                  type: number
                volume:
                  type: number
                publisher:
                  type: string
                coverVariant:
                  type: string
                releaseDate:
                  type: string
                  format: date
                rating:
                  type: number
                purchasePrice:
                  type: number
                currentValue:
                  type: number
                condition:
                  type: string
                isRead:
                  type: boolean
                genre:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                notes:
                  type: string
      responses:
        '200':
          description: Comic successfully updated
        '400':
          description: Invalid update request
        '404':
          description: Comic not found

    # DELETE to delete a comic by id
    delete:
      tags:
        - Comics
      summary: Delete a comic by ID
      description: Removes a comic from the collection using its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Comic to delete
      responses:
        '200':
          description: Comic successfully deleted
        '404':
          description: Comic not found

  # Filter comics GET
  /comics/filter:
    get:
      tags:
        - Comics
      summary: Filter comic collection by author, publisher, volume, etc.
      responses:
        '200': 
          description: Comic by filter
  
  # Export comics GET
  /comics/export:
    get:
      tags: 
        - Comics
      summary: Export comic collection in JSON or CSV format
      parameters:
        - in: query
          name: format
          schema:
            type: string
            enum: [json, csv]
          description: Format of the export file (json or csv). Default is json.
      responses:
        '200':
          description: Exported comic data file
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
            text/csv:
              schema:
                type: string
        '400':
          description: Invalid format parameter

  # Import comics POST
  /comics/import:
    post: 
      tags: 
        - Comics 
      summary: Bulk import comics from JSON data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Comics imported successfully
        '400':
          description: Invalid or missing import data
  
  # Main shop related endpoints (GET, POST)
  /shops:
    # GET all shops
    get: 
      tags: 
        - Shops
      summary: List all shops
      responses: 
        '200': 
          description: A list of all saved shops 
    
    # POST to add a new shop
    post:
      tags: 
        - Shops
      summary: Submit a new shop 
      requestBody: 
        required: true
        content: 
          application/json:
            schema:
              type: object
              required: 
                - name 
                - address
              properties:
                name: 
                  type: string
                address: 
                  type: string
                phone: 
                  type: string
                email: 
                  type: string
                website: 
                  type: string
                notes: 
                  type: string
                tags: 
                  type: array
                  items: 
                    type: string
      responses:
        '201': 
          description: Shop entry created 

  # User register route
  /users/register:
    post:
      tags: 
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required: 
                - username
                - email
                - password
              properties:
                username: 
                  type: string
                email:
                  type: string
                password: 
                  type: string
      responses:
        '201':
          description: User created
        '400':
          description: Request related error

  # User login route
  /users/login:
    post:
      tags: 
        - Users
      summary: Login to your account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password 
              properties:
                email:
                  type: string
                password: 
                  type: string 
      responses:
        '200':
          description: Login Successful!
        '400':
          description: Bad request - missing or invalid parameters
        '401':
          description: Unauthorized - incorrect email or password
  
  # User logout route GET
  /users/logout:
    get: 
      tags: 
        - Users 
      summary: Logout the current user
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # User dashboard route GET
  /users/dashboard:
    get: 
      tags: 
        - Users
      summary: Get user dashboard (authenticated)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard data for the authenticated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized - token missing or invalid